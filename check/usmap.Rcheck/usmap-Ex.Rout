
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "usmap"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "usmap-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('usmap')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("dot-east_north_central")
> ### * dot-east_north_central
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .east_north_central
> ### Title: East North Central census division
> ### Aliases: .east_north_central
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .east_north_central, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-east_north_central", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-east_south_central")
> ### * dot-east_south_central
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .east_south_central
> ### Title: East South Central census division
> ### Aliases: .east_south_central
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .east_south_central, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-east_south_central", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-mid_atlantic")
> ### * dot-mid_atlantic
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .mid_atlantic
> ### Title: Mid-Atlantic census division
> ### Aliases: .mid_atlantic
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .mid_atlantic, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-mid_atlantic", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-midwest_region")
> ### * dot-midwest_region
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .midwest_region
> ### Title: Midwest census region
> ### Aliases: .midwest_region
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .midwest_region, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-midwest_region", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-mountain")
> ### * dot-mountain
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .mountain
> ### Title: Mountain census division
> ### Aliases: .mountain
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .mountain, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-mountain", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-new_england")
> ### * dot-new_england
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .new_england
> ### Title: New England census division
> ### Aliases: .new_england
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .new_england, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-new_england", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-north_central_region")
> ### * dot-north_central_region
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .north_central_region
> ### Title: North-Central census region
> ### Aliases: .north_central_region
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .north_central_region, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-north_central_region", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-northeast_region")
> ### * dot-northeast_region
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .northeast_region
> ### Title: Northeast census region
> ### Aliases: .northeast_region
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .northeast_region, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-northeast_region", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-pacific")
> ### * dot-pacific
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .pacific
> ### Title: Pacific census division
> ### Aliases: .pacific
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .pacific, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-pacific", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-south_atlantic")
> ### * dot-south_atlantic
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .south_atlantic
> ### Title: South Atlantic census division
> ### Aliases: .south_atlantic
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .south_atlantic, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-south_atlantic", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-south_region")
> ### * dot-south_region
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .south_region
> ### Title: South census region
> ### Aliases: .south_region
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .midwest_region, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-south_region", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-west_north_central")
> ### * dot-west_north_central
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .west_north_central
> ### Title: West North Central census division
> ### Aliases: .west_north_central
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .west_north_central, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-west_north_central", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-west_region")
> ### * dot-west_region
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .west_region
> ### Title: West census region
> ### Aliases: .west_region
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .midwest_region, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-west_region", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dot-west_south_central")
> ### * dot-west_south_central
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: .west_south_central
> ### Title: West South Central census division
> ### Aliases: .west_south_central
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot_usmap(include = .west_south_central, labels = TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dot-west_south_central", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fips")
> ### * fips
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fips
> ### Title: Retrieve FIPS code for either a US state or county
> ### Aliases: fips
> 
> ### ** Examples
> 
> fips()
 [1] "02" "01" "05" "04" "06" "08" "09" "11" "10" "12" "13" "15" "19" "16" "17"
[16] "18" "20" "21" "22" "25" "24" "23" "26" "27" "29" "28" "30" "37" "38" "31"
[31] "33" "34" "35" "32" "36" "39" "40" "41" "42" "72" "44" "45" "46" "47" "48"
[46] "49" "51" "50" "53" "55" "54" "56"
> 
> fips("NJ")
[1] "34"
> fips("California")
[1] "06"
> 
> fips(c("AK", "CA", "UT"))
[1] "02" "06" "49"
> 
> fips("CA", county = "orange")
[1] "06059"
> fips(state = "AL", county = "autauga")
[1] "01001"
> fips(state = "Alabama", county = "Autauga County")
[1] "01001"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fips", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fips_info")
> ### * fips_info
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fips_info
> ### Title: Retrieve states or counties using FIPS codes
> ### Aliases: fips_info fips_info.numeric fips_info.character
> 
> ### ** Examples
> 
> fips_info(2)
  abbr fips   full
1   AK   02 Alaska
> fips_info("2")
Warning in get_fips_info(fips_, sortAndRemoveDuplicates, data_year = data_year) :
  FIPS code(s)  2 not found, returned 0 results.
[1] abbr fips full
<0 rows> (or 0-length row.names)
> fips_info(c("02", "03", "04"))
Warning in get_fips_info(fips_, sortAndRemoveDuplicates, data_year = data_year) :
  FIPS code(s) 03 not found
  abbr fips    full
1   AK   02  Alaska
2   AZ   04 Arizona
> 
> fips_info(2016)
    full abbr                     county  fips
1 Alaska   AK Aleutians West Census Area 02016
> fips_info(c("02016", "02017"), sortAndRemoveDuplicates = TRUE)
Warning in get_fips_info(fips_, sortAndRemoveDuplicates, data_year = data_year) :
  FIPS code(s) 02017 not found
    full abbr                     county  fips
1 Alaska   AK Aleutians West Census Area 02016
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fips_info", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("map_with_data")
> ### * map_with_data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: map_with_data
> ### Title: Join county or state level data to US map data
> ### Aliases: map_with_data
> 
> ### ** Examples
> 
> state_data <- data.frame(fips = c("01", "02", "04"), values = c(1, 5, 8))
> df <- map_with_data(state_data, na = 0)
> 
> state_data <- data.frame(state = c("AK", "CA", "Utah"), values = c(6, 9, 3))
> df <- map_with_data(state_data, na = 0)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("map_with_data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_usmap")
> ### * plot_usmap
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_usmap
> ### Title: Conveniently plot basic US map
> ### Aliases: plot_usmap
> 
> ### ** Examples
> 
> plot_usmap()
> plot_usmap(regions = "states")
> plot_usmap(regions = "counties")
> plot_usmap(regions = "state")
> plot_usmap(regions = "county")
> 
> # Output is ggplot object so it can be extended
> # with any number of ggplot layers
> library(ggplot2)
> plot_usmap(include = c("CA", "NV", "ID", "OR", "WA")) +
+   labs(title = "Western States")
> 
> # Color maps with data
> plot_usmap(data = statepop, values = "pop_2022")
> 
> # Include labels on map (e.g. state abbreviations)
> plot_usmap(data = statepop, values = "pop_2022", labels = TRUE)
> # Choose color for labels
> plot_usmap(data = statepop, values = "pop_2022", labels = TRUE, label_color = "white")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_usmap", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("us_map")
> ### * us_map
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: us_map
> ### Title: Retrieve US map data
> ### Aliases: us_map
> 
> ### ** Examples
> 
> str(us_map())
Classes ‘sf’ and 'data.frame':	52 obs. of  4 variables:
 $ fips: chr  "02" "01" "05" "04" ...
 $ abbr: chr  "AK" "AL" "AR" "AZ" ...
 $ full: chr  "Alaska" "Alabama" "Arkansas" "Arizona" ...
 $ geom:sfc_MULTIPOLYGON of length 52; first list element: List of 47
  ..$ :List of 1
  .. ..$ : num [1:9, 1:2] -2390688 -2387144 -2385403 -2381808 -2383378 ...
  ..$ :List of 1
  .. ..$ : num [1:14, 1:2] -2421123 -2418972 -2411531 -2404828 -2402353 ...
  ..$ :List of 1
  .. ..$ : num [1:7, 1:2] -2421477 -2418935 -2417999 -2420152 -2421314 ...
  ..$ :List of 1
  .. ..$ : num [1:6, 1:2] -2431161 -2427289 -2426334 -2426972 -2429909 ...
  ..$ :List of 1
  .. ..$ : num [1:7, 1:2] -2431855 -2429938 -2428889 -2429380 -2431964 ...
  ..$ :List of 1
  .. ..$ : num [1:20, 1:2] -2460029 -2456927 -2454788 -2451596 -2448993 ...
  ..$ :List of 1
  .. ..$ : num [1:7, 1:2] -2546091 -2540802 -2538816 -2538986 -2544230 ...
  ..$ :List of 1
  .. ..$ : num [1:12, 1:2] -2563369 -2559866 -2556791 -2553131 -2556338 ...
  ..$ :List of 1
  .. ..$ : num [1:20, 1:2] -2583384 -2577340 -2573060 -2564056 -2561139 ...
  ..$ :List of 1
  .. ..$ : num [1:77, 1:2] -995482 -993129 -992198 -991411 -991958 ...
  ..$ :List of 1
  .. ..$ : num [1:63, 1:2] -1028654 -1026842 -1024708 -1023942 -1020501 ...
  ..$ :List of 1
  .. ..$ : num [1:45, 1:2] -1076257 -1072785 -1069351 -1066830 -1066041 ...
  ..$ :List of 1
  .. ..$ : num [1:78, 1:2] -1111408 -1111895 -1109805 -1108349 -1110959 ...
  ..$ :List of 1
  .. ..$ : num [1:7, 1:2] -1554894 -1552649 -1549532 -1550566 -1551737 ...
  ..$ :List of 1
  .. ..$ : num [1:8, 1:2] -1588623 -1585891 -1583836 -1581859 -1582607 ...
  ..$ :List of 1
  .. ..$ : num [1:121, 1:2] -1608701 -1606747 -1605064 -1602725 -1599728 ...
  ..$ :List of 1
  .. ..$ : num [1:14, 1:2] -1604364 -1601124 -1596099 -1587321 -1584055 ...
  ..$ :List of 1
  .. ..$ : num [1:9, 1:2] -1627275 -1625709 -1623661 -1621346 -1621629 ...
  ..$ :List of 1
  .. ..$ : num [1:7, 1:2] -1657811 -1656434 -1654243 -1654087 -1655836 ...
  ..$ :List of 1
  .. ..$ : num [1:8, 1:2] -1676496 -1673257 -1670826 -1667267 -1669250 ...
  ..$ :List of 1
  .. ..$ : num [1:24, 1:2] -1757988 -1756550 -1756659 -1755316 -1752054 ...
  ..$ :List of 1
  .. ..$ : num [1:19, 1:2] -1777341 -1776044 -1772492 -1767347 -1762003 ...
  ..$ :List of 1
  .. ..$ : num [1:9, 1:2] -1789067 -1788516 -1784782 -1778901 -1778285 ...
  ..$ :List of 1
  .. ..$ : num [1:6, 1:2] -1794182 -1792112 -1791302 -1791596 -1794859 ...
  ..$ :List of 1
  .. ..$ : num [1:5, 1:2] -1802384 -1797220 -1798192 -1802119 -1802384 ...
  ..$ :List of 1
  .. ..$ : num [1:9, 1:2] -1835867 -1827860 -1820421 -1821704 -1824056 ...
  ..$ :List of 1
  .. ..$ : num [1:14, 1:2] -1920106 -1915975 -1910208 -1905914 -1901830 ...
  ..$ :List of 1
  .. ..$ : num [1:13, 1:2] -1934092 -1930947 -1928153 -1920680 -1916190 ...
  ..$ :List of 1
  .. ..$ : num [1:44, 1:2] -1954353 -1951268 -1946003 -1941602 -1939148 ...
  ..$ :List of 1
  .. ..$ : num [1:58, 1:2] -1988599 -1985507 -1982287 -1978047 -1975315 ...
  ..$ :List of 1
  .. ..$ : num [1:1245, 1:2] -1932890 -1929114 -1921577 -1913002 -1900860 ...
  ..$ :List of 1
  .. ..$ : num [1:33, 1:2] -2036582 -2028705 -2025934 -2022659 -2020219 ...
  ..$ :List of 1
  .. ..$ : num [1:7, 1:2] -2037520 -2031769 -2027800 -2027418 -2031313 ...
  ..$ :List of 1
  .. ..$ : num [1:16, 1:2] -2064322 -2061420 -2059278 -2054122 -2050942 ...
  ..$ :List of 1
  .. ..$ : num [1:7, 1:2] -2051199 -2047795 -2043338 -2043410 -2047971 ...
  ..$ :List of 1
  .. ..$ : num [1:8, 1:2] -2085142 -2080322 -2076015 -2078002 -2081197 ...
  ..$ :List of 1
  .. ..$ : num [1:6, 1:2] -2101236 -2099338 -2097542 -2098768 -2101144 ...
  ..$ :List of 1
  .. ..$ : num [1:54, 1:2] -2034221 -2032618 -2031844 -2029803 -2026867 ...
  ..$ :List of 1
  .. ..$ : num [1:9, 1:2] -2142932 -2140571 -2137363 -2133659 -2133046 ...
  ..$ :List of 1
  .. ..$ : num [1:13, 1:2] -2093048 -2090033 -2089266 -2082743 -2078886 ...
  ..$ :List of 1
  .. ..$ : num [1:37, 1:2] -2228763 -2220057 -2215311 -2209935 -2204698 ...
  ..$ :List of 1
  .. ..$ : num [1:39, 1:2] -2283095 -2281187 -2276684 -2275798 -2276826 ...
  ..$ :List of 1
  .. ..$ : num [1:17, 1:2] -2305126 -2299351 -2293704 -2290844 -2289077 ...
  ..$ :List of 1
  .. ..$ : num [1:19, 1:2] -2320076 -2316655 -2312400 -2310960 -2306956 ...
  ..$ :List of 1
  .. ..$ : num [1:7, 1:2] -2344705 -2337623 -2333827 -2335286 -2340149 ...
  ..$ :List of 1
  .. ..$ : num [1:6, 1:2] -2341800 -2338668 -2337871 -2340054 -2342947 ...
  ..$ :List of 1
  .. ..$ : num [1:7, 1:2] -2356315 -2349468 -2347609 -2347445 -2353387 ...
  ..- attr(*, "class")= chr [1:3] "XY" "MULTIPOLYGON" "sfg"
 - attr(*, "sf_column")= chr "geom"
 - attr(*, "agr")= Factor w/ 3 levels "constant","aggregate",..: NA NA NA
  ..- attr(*, "names")= chr [1:3] "fips" "abbr" "full"
> 
> df <- us_map(regions = "counties")
> west_coast <- us_map(include = c("CA", "OR", "WA"))
> 
> excl_west_coast <- us_map(exclude = c("CA", "OR", "WA"))
> 
> ct_counties_as_of_2022 <- us_map(regions = "counties", include = "CT", data_year = 2022)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("us_map", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("usmap_transform")
> ### * usmap_transform
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: usmap_transform
> ### Title: Convert spatial data to usmap projection
> ### Aliases: usmap_transform usmap_transform.sf usmap_transform.data.frame
> 
> ### ** Examples
> 
> data <- data.frame(
+   lon = c(-74.01, -95.36, -118.24, -87.65, -134.42, -157.86),
+   lat = c(40.71, 29.76, 34.05, 41.85, 58.30, 21.31),
+   pop = c(8398748, 2325502, 3990456, 2705994, 32113, 347397)
+ )
> 
> # Transform data
> transformed_data <- usmap_transform(data)
> 
> # Plot transformed data on map
> library(ggplot2)
> 
> plot_usmap() + geom_sf(
+   data = transformed_data,
+   aes(size = pop),
+   color = "red", alpha = 0.5
+ )
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("usmap_transform", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:ggplot2’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.234 0.115 6.35 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
